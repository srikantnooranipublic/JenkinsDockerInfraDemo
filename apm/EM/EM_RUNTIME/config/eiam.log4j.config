<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<!-- Note that this file is read by the sdk every 60 seconds -->

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<appender name="SDK" class="com.ca.eiam.log4j.RollingFileAppender">
		<!-- The active sdk log file -->
		<param name="file" value="eiam.javasdk.log" />
		<param name="append" value="true" />
		<param name="BufferedIO" value="false"/>
		<param name="maxFileSize" value="10000KB" />
		<param name="maxBackupIndex" value="1" />
		<layout class="com.ca.eiam.log4j.PatternLayout">
			<!-- The log message pattern -->
			<param name="ConversionPattern" value="%5p %d{ISO8601} [%t] [%c] %m%n"/>
		</layout>
	</appender>

	<appender name="Network" class="com.ca.eiam.log4j.RollingFileAppender">
		<!-- The file to log Network calls -->
		<param name="file" value="eiam.network.java.log" />
		<param name="append" value="true" />
		<param name="BufferedIO" value="false"/>
		<param name="maxFileSize" value="10000KB" />
		<param name="maxBackupIndex" value="1" />
		<layout class="com.ca.eiam.log4j.PatternLayout">
			<!-- The log message pattern -->
			<param name="ConversionPattern" value="%5p %d{ISO8601} [%t] [%c] %m%n"/>
		</layout>
	</appender>

	<appender name="Performance" class="com.ca.eiam.log4j.RollingFileAppender">
		<!-- The file to log Performance calls -->
		<param name="file" value="eiam.performance.java.log" />
		<param name="append" value="true" />
		<param name="BufferedIO" value="false"/>
		<param name="maxFileSize" value="10000KB" />
		<param name="maxBackupIndex" value="1" />
		<layout class="com.ca.eiam.log4j.PatternLayout">
			<!-- The log message pattern -->
			<param name="ConversionPattern" value="%5p %d{ISO8601} [%t] [%c] %m%n"/>
		</layout>
	</appender>
	
	<appender name="Console" class="com.ca.eiam.log4j.ConsoleAppender">
		<!-- Logs to Console -->
		<layout class="com.ca.eiam.log4j.PatternLayout">
			<!-- The log message pattern -->
			<param name="ConversionPattern" value="%5p %d{ISO8601} [%t] [%c] %m%n"/>
		</layout>
	</appender>
	
	<!-- Uncomment to enable Performance Logging -->
	<!--
	<logger name="Perform" additivity="false">
		<level value="trace"/>
		<appender-ref ref="Performance" />
	</logger>
	-->
	
	<!-- Uncomment to enable Network Logging -->
	<!--
	<logger name="Network" additivity="false">
		<level value="trace"/>
		<appender-ref ref="Network" />
	</logger>
	-->

	<root>
		<priority value="error" />
		<appender-ref ref="SDK" />
		<!-- <appender-ref ref="Console" /> -->
	</root>

</log4j:configuration>

<!-- HELP to modify log levels and conversion format -->
<!-- Set config file path to EIAMCONFIG env variable (eg:- export EIAMCONFIG=(currentpath)/eiam.config ) -->
<!-- LOG LEVELS [ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF] -->
<!--
TRACE: For low level debugging.To check control flow and passed arguments .
DEBUG: Messages in this level contain extensive contextual information. They are mostly used for problem diagnosis.
INFO: These messages contain some contextual information to help trace execution (at a coarse-grained level) in a production environment.
WARN: A warning message indicates a potential problem in the system. For example, if the message category is related to security, a warning message should be produced if a dictionary attack is detected.
ERROR: An error message indicates a serious problem in the system. The problem is usually non-recoverable and requires manual intervention. 
FATAL: Fatal application exception.
OFF: No logging.
-->
 
<!-- Instructions to format log message  
 
Conversion Character 	Effect 	   

c 	Used to output the logger of the logging event. The logger conversion specifier can be optionally followed by precision specifier, that is a decimal constant in brackets. 
	If a precision specifier is given, then only the corresponding number of right most components of the logger name will be printed. By default the logger name is printed in full. 
	For example, for the logger name "a.b.c" the pattern %c{2} will output "b.c". 	  
 
d 	Used to output the date of the logging event. The date conversion specifier may be followed by a set of braces containing a date and time pattern string compatible with java.text.SimpleDateFormat, ABSOLUTE, DATE or ISO8601. For example, d{HH:mm:ss,SSS}, d{dd MMM yyyy HH:mm:ss,SSS} or d{DATE}. If no date format specifier is given then ISO8601 format is assumed. 	   
F 	Used to output the file name where the logging request was issued. 	   
l 	Used to output location information of the caller which generated the logging event. 	   
L 	Used to output the line number from where the logging request was issued. 	   
m 	Used to output the application supplied message associated with the logging event. 	   
n 	Outputs the platform dependent line separator character or characters. 
	This conversion character offers practically the same performance as using non-portable line separator strings such as "\n", or "\r\n". Thus, it is the preferred way of specifying a line separator. 	   
p 	Used to output the level of the logging event. 	   
r 	Used to output the number of milliseconds elapsed since the start of the application until the creation of the logging event. 	   
t 	Used to output the name of the thread that generated the logging event. 	   
x 	Used to output the NDC (nested diagnostic context) associated with the thread that generated the logging event. 	   
X 	Used to output the MDC (mapped diagnostic context) associated with the thread that generated the logging event. The X conversion character must be followed by the key for the map placed between braces, as in %X{clientNumber} where clientNumber is the key. The value in the MDC corresponding to the key will be output. 
	See MDC class for more details. 	   
% 	The sequence %% outputs a single percent sign. 	 
 
 
Below are various format modifier examples for the logger conversion specifier.

Format modifier  left justify  minimum width  maximum width  comment 
 
%20c  false  20  none  	Left pad with spaces if the logger name is less than 20 characters long.
%-20c  true  20  none  	Right pad with spaces if the logger name is less than 20 characters long.
%.30c  NA  none  30		Truncate from the beginning if the logger name is longer than 30 characters.
%20.30c  false  20  30	Left pad with spaces if the logger name is shorter than 20 characters. However, if logger name is longer than 30 characters, then truncate from the beginning.
%-20.30c  true  20  30	Right pad with spaces if the logger name is shorter than 20 characters. However, if logger name is longer than 30 characters, then truncate from the beginning.

Below are some examples of conversion patterns.
%r [%t] %-5p %c %x - %m

This is essentially the TTCC layout.

%-6r [%15.15t] %-5p %30.30c %x - %m

Similar to the TTCC layout except that the relative time is right padded if less than 6 digits, thread name is right padded if less than 15 characters and truncated if longer and the logger name is left padded if shorter than 30 characters and truncated if longer.
 
-->
